{"title":"瞎学的java基础语法","uid":"50dae02cf68f09e79955ea48c8fd607c","slug":"javaGrammar","date":"2024-01-21T15:53:45.000Z","updated":"2024-01-22T11:33:06.163Z","comments":true,"path":"api/articles/javaGrammar.json","keywords":null,"cover":null,"content":"<p>ε &#x3D;(´ο｀*)))唉，上次用 Java 还是在上次，感觉语法什么的已经忘得干干净净了，先来总结一些我易混的知识点啥的恢复一下记忆</p>\n<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1><h2 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h2><p><strong>定义</strong>：包（package），类（Class），方法（Method），变量（Variable）起名字的符号</p>\n<p><strong>组成规则</strong>：由字母、数字、下划线“_”、美元符号$或者￥组成，首字符不能是数字，不能是 Java 中的关键字，大小写敏感，无长度限制，不能包含空格。</p>\n<h2 id=\"Java-注解\"><a href=\"#Java-注解\" class=\"headerlink\" title=\"Java 注解\"></a>Java 注解</h2><p><strong>定义</strong>：用于解释说明程序的文字</p>\n<p><strong>分类</strong>：单行注释“&#x2F;&#x2F;”, 快捷键：Ctrl+&#x2F;</p>\n<p>​\t\t\t多行注释”&#x2F; * 注释文字 * &#x2F;“”，快捷键：Ctrl+Shift+&#x2F;</p>\n<h2 id=\"Java-访问修饰符\"><a href=\"#Java-访问修饰符\" class=\"headerlink\" title=\"Java 访问修饰符\"></a>Java 访问修饰符</h2><p><strong>定义：</strong> 使用访问修饰符可以保护对类、变量、方法、构造方法的访问，Java 中有四种不同的访问权限</p>\n<p><strong>分类</strong>： <em>private</em>：在同一类（Class）内可见，不能修饰类（外部类）</p>\n<p>​\t\t\t<em>default</em>：（缺省，什么也不写，不使用关键字）在同一包（package）内可见，不适用任何修饰符，也叫包访问权限。</p>\n<p>​\t\t\t<em>protected</em>：对同一包内的类和所有子类可见。不能修饰类（外部类）</p>\n<p>​\t\t\t<em>public</em>：对所有类可见</p>\n<p><strong>拓展</strong>：一个 Java 源程序中可以有多个 Class 类，但只能有一个类是 public 的。</p>\n<p>​\t\t\tjava 程序是从一个 public 程序中的 main 函数开始执行的，就像 C++程序从 main（）开始执行一样。</p>\n<p>​\t\t\t只能有一个 public 是为了给 <em>类装载器</em> 提供方便，<strong>public 只能定义在以他的类名为文件名的文件中（严格区分大小写）</strong></p>\n<h2 id=\"Java-分隔符、转义符\"><a href=\"#Java-分隔符、转义符\" class=\"headerlink\" title=\"Java 分隔符、转义符\"></a>Java 分隔符、转义符</h2><h3 id=\"分隔符\"><a href=\"#分隔符\" class=\"headerlink\" title=\"分隔符\"></a>分隔符</h3><p><strong>定义</strong>：空格、逗号、分号以及行结束符，<strong>规定任意两个相邻标识符、数字、保留字、语句之间必须存在至少一个分隔符</strong>，以保证程序编译时能正常识别。</p>\n<p><strong>分类</strong>：</p>\n<ul>\n<li>​\t\t\t分号“；”\t用于终止一个语句</li>\n<li>​\t\t\t冒号“：”\t</li>\n<li>​\t\t\t花括号、大括号“{}”\t用于包括自动初始化数组的值，也用于定义程序块、类、方法以及局部范围。</li>\n<li>​\t\t\t方括号、中括号“[]”\t用于声明数组类型，也用于撤销对数组值的引用。</li>\n<li>​\t\t\t逗号“，”\t在变量声明中，区分变量说明的各个变量。在 for 控制语句中将圆括号内的语句连接起来</li>\n<li>​\t\t\t圆点“.”\t将软件包的名字和他的子包或类相分隔，也用来将引用变量与变量或者方法分隔</li>\n<li>​\t\t\t圆括号“（）”\t定义和调用方法时容纳参数表，在控制语句或者强制类型转换表达式中表示执行或者计算的优先权</li>\n<li>​\t\t\t尖括号“&lt;&gt;”\t将参数传递给参数化类型</li>\n</ul>\n<h3 id=\"转义符\"><a href=\"#转义符\" class=\"headerlink\" title=\"转义符\"></a>转义符</h3><p><strong>定义</strong>：特殊的字符常量，以反斜线“\\”开头，后跟一个或者几个字符，通常具有特定的含义，不同于字符原有的意义。</p>\n<p><strong>常用转义字符</strong></p>\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>意义</th>\n<th>ASCII 码制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\n</td>\n<td>换行符（LF）</td>\n<td>10</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车（CR）</td>\n<td>13</td>\n</tr>\n<tr>\n<td>\\y</td>\n<td>水平制表（HT）（一个 Tab）</td>\n<td>9</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表（VT）</td>\n<td>11</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>代表一个反斜线字符‘\\’</td>\n<td>92</td>\n</tr>\n<tr>\n<td>\\‘</td>\n<td>代表一个单引号字符</td>\n<td>39</td>\n</tr>\n<tr>\n<td>\\“</td>\n<td>代表一个双引号字符</td>\n<td>34</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>空字符（NULL）</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<h2 id=\"Java-数据类型\"><a href=\"#Java-数据类型\" class=\"headerlink\" title=\"Java 数据类型\"></a>Java 数据类型</h2><p><strong>定义</strong>：Java 是强制类语言，对于每一种数据定义明确了具体的数据类型，内存中分配不同大小的内存空间</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p><strong>数值型</strong></p>\n<p>整数类型\t</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>字节</th>\n<th>位数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>64</td>\n</tr>\n</tbody></table>\n<p>定义 long 类型时要在后面加后缀 L 或者 l</p>\n<p>浮点类型</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>字节</th>\n<th>位数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n</tr>\n</tbody></table>\n<p>定义浮点类型时候后缀没有 F 或者 f 时候默认是 double 类型，float 类型赋值时需要添加后缀 F 或者 f</p>\n<p><strong>字符型</strong></p>\n<p>char，采用 Unicode 编码，两字节表示一个字符，</p>\n<p><strong>布尔型</strong></p>\n<p>blloean，1 字节表示一个字符</p>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><p><strong>类(class)</strong><br><strong>接口(interface)</strong><br><strong>数组([])</strong></p>\n<h3 id=\"简单数据转换\"><a href=\"#简单数据转换\" class=\"headerlink\" title=\"简单数据转换\"></a>简单数据转换</h3><p>Java 中整形，实型（浮点型），字符型都被称为简单数据类型，这些类型由低级到高级分别为：</p>\n<p>（byte，short，char） - int - long - float - double</p>\n<p>简单数据类型之间的转换又分为：</p>\n<ul>\n<li><p>低级到高级的自动类型转换</p>\n</li>\n<li><p>高级到低级的强制类型转换（可能导致溢出或者精度下降）</p>\n</li>\n<li><p>包装类过渡类型能够转换</p>\n</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//自动类型转换</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #C792EA\">byte</span><span style=\"color: #BABED8\"> b</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">b</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #C792EA\">long</span><span style=\"color: #BABED8\"> l</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">b</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #C792EA\">float</span><span style=\"color: #BABED8\"> f</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">b</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #C792EA\">double</span><span style=\"color: #BABED8\"> d</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">b</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//低级类型为 char 型，向高级类型（整形）转换，会转换为对应的 ASCII 码</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">char</span><span style=\"color: #BABED8\"> c</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">c</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//System.out.println(&quot;output:&quot; i);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//输出：output: 99;</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> args</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//1.多个类型数据混合运数时，系统会按最大的类型进行转换</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> a </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//float a1 = a + 1.1; //错误  结果类型一个是 double</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">float</span><span style=\"color: #BABED8\"> a2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> a </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1.1F</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">//结果类型一个是 float</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">double</span><span style=\"color: #BABED8\"> a3 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> a </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1.1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">//结果类型一个是 double</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//2.容量大的赋值给容量小的肯定会报错</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//int b = 1.1; //错误 原因：double -&gt; int</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//3.(byte，short) 和 char 之间不会相互自动转换</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">byte</span><span style=\"color: #BABED8\"> b1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//正确</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> b2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//byte b3 = b2; //错误 原因：变量赋值，判断该类型</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//char c1 = b1; //错误 原因：byte 不能自动转换为 char</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//4.byte，short，char 该三个数据类型计算，计算时首先转换为 int 类型</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">byte</span><span style=\"color: #BABED8\"> c1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">short</span><span style=\"color: #BABED8\"> c2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//short c3 = c1 + c2; //错误 原因：计算时首先转换为 int 类型</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> c3 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> c1 </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> c2</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//正确</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p><strong>float 型转换为 double 型</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">float</span><span style=\"color: #BABED8\"> f1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">100.00f</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Float</span><span style=\"color: #BABED8\"> F1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Float</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">f1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//F1.doubleValue()为 Float 类的返回 double 值型的方法</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">double</span><span style=\"color: #BABED8\"> d1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">F1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">doubleValue</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span></code></pre></div><p><strong>double 型转换为 int 型：</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">double</span><span style=\"color: #BABED8\"> d1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">100.00</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Double</span><span style=\"color: #BABED8\"> D1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Double</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">d1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">D1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">intValue</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//直接把 double 型的小数位去除</span></span></code></pre></div><p><strong>字符串类的转换这里不在叙述，之后会单独开一节字符类型的学习</strong></p>\n<h2 id=\"Java-变量\"><a href=\"#Java-变量\" class=\"headerlink\" title=\"Java 变量\"></a>Java 变量</h2><p>定义：在程序执行过程中，某个范围内可以发生改变 的量，从本质上讲变量其实是内存中的一小块区域。</p>\n<h3 id=\"按被声明的位置划分\"><a href=\"#按被声明的位置划分\" class=\"headerlink\" title=\"按被声明的位置划分\"></a>按被声明的位置划分</h3><p><strong>成员变量</strong>：方法外部，类的内部定义的变量</p>\n<ul>\n<li><strong>类变量（静态变量）</strong> 独立于方法之外的变量，用 static 修饰<ul>\n<li>静态变量以 static 关键字声明，必须在方法构造方法和语句块之外</li>\n<li>静态变量存储在静态存储区，经常被声明为常量，很少单独使用 static 声明。</li>\n<li>静态变量第一次访问时被创建，程序结束时被销毁。</li>\n</ul>\n</li>\n<li><strong>实例变量（非静态变量）</strong> 定义在类中但在任何方法之外，没有 static 修饰<ul>\n<li>实例变量声明在一个类当中，但是在方法、构造方法和语句块之外</li>\n<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁</li>\n</ul>\n</li>\n<li><strong>局部变量</strong><ul>\n<li>类的方法中的变量</li>\n<li>局部变量声明在方法、构造方法或者语句块中</li>\n<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁</li>\n<li>访问修饰符不能用于局部变量</li>\n<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"按所属的数据类型划分\"><a href=\"#按所属的数据类型划分\" class=\"headerlink\" title=\"按所属的数据类型划分\"></a>按所属的数据类型划分</h3><p><strong>基本数据类型变量</strong></p>\n<ul>\n<li>基本数据类型<ul>\n<li>byte，short，int，float，double，char，boolean</li>\n</ul>\n</li>\n<li>变量定义<ul>\n<li>数据类型 变量名 &#x3D; 初始化值</li>\n</ul>\n</li>\n<li>注意<ul>\n<li>整型默认是 int 类型，定义 long 类型时要在数据后面加 L 或者 l，浮点型默认是 double 型，定义 float 型时需要在数据后面加 F 或者 f</li>\n</ul>\n</li>\n</ul>\n<p><strong>引用数据类型</strong>（类，接口，数组）</p>\n<ul>\n<li>定义格式<ul>\n<li>数据类型 变量名 &#x3D; 初始化值</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Variable</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 类变量</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> globalNum</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">     </span><span style=\"color: #676E95; font-style: italic\">// 实例变量</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> str</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hello world</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">method</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 局部变量</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><h2 id=\"Java-常量\"><a href=\"#Java-常量\" class=\"headerlink\" title=\"Java 常量\"></a>Java 常量</h2><p><strong>定义</strong>：Java 中用关键字 final 定义一个常量，，常量被初始化后其值不可以发生改变。常量可以在程序执行的过程中使用一个符号来代替常量值使用，因此在使用前必须定义。</p>\n<p><strong>分类</strong>：</p>\n<ul>\n<li>字符串类常量：用双引号括起来的内容</li>\n<li>整数常量：所有整数</li>\n<li>小数常量：所有小数</li>\n<li>字符常量：用单引号括起来的内容</li>\n<li>布尔常量：只有 true 和 false</li>\n<li>空常量：null</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> CONUT </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">float</span><span style=\"color: #BABED8\"> PI </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3.1415f</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p><strong>定义</strong>：运算符指明对操作数的运算方式</p>\n<hr>\n<ol>\n<li><p><strong>算数运算符</strong></p>\n<ul>\n<li><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>除</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模</td>\n</tr>\n<tr>\n<td>++</td>\n<td>自增</td>\n</tr>\n<tr>\n<td>–</td>\n<td>自减</td>\n</tr>\n<tr>\n<td>+</td>\n<td>字符串相加</td>\n</tr>\n</tbody></table>\n<p><em>注意事项</em></p>\n<ul>\n<li>除号&#x2F;左右两端的类型需要一致</li>\n<li>取模%最后的符号和被模数相同</li>\n<li>前++，先+1，后运算，后++，先运算，后+1</li>\n<li>+：当 String 字符串与其他数据类型只能做连接运算，并且结果为 String 型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>关系运算符</p>\n<ul>\n<li><p>​\t</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x3D;&#x3D;</td>\n<td>相等于</td>\n</tr>\n<tr>\n<td>！&#x3D;</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>instanceof</td>\n<td>检查是否为类的对象</td>\n</tr>\n</tbody></table>\n<p><em>注意事项</em></p>\n<ul>\n<li>Instanceof 运算符<ul>\n<li>语法：对象名 instanceof 类或接口</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>赋值运算符</p>\n<p>&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;</p>\n</li>\n<li><p>逻辑运算符</p>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>||（短路或）</td>\n<td>都为 false 则为 false，有一个为 true 便不再判断了</td>\n</tr>\n<tr>\n<td>|（逻辑或）</td>\n<td>都为 false 则为 false，所有条件都判断</td>\n</tr>\n<tr>\n<td>&amp;&amp;（短路与）</td>\n<td>都为 true 则为 true，有一个为 false 便不在判断了</td>\n</tr>\n<tr>\n<td>&amp;（逻辑与）</td>\n<td>都为 true 则为 true，所有条件都判断</td>\n</tr>\n<tr>\n<td>！（非）</td>\n<td>变成相反</td>\n</tr>\n<tr>\n<td>^（异或）</td>\n<td>相同为 false，不同为 true</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>位运算符</p>\n</li>\n<li><p>三目运算符</p>\n<p>（条件表达式 A）？表达式 1：表达式 2；</p>\n<p>若条件表达式 A 为 true，则运算结果为表达式 1；否则为表达式 2</p>\n</li>\n</ol>\n<h2 id=\"Java-流程控制——顺序控制结构\"><a href=\"#Java-流程控制——顺序控制结构\" class=\"headerlink\" title=\"Java 流程控制——顺序控制结构\"></a>Java 流程控制——顺序控制结构</h2><p><em>顺序控制结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</em></p>\n<h2 id=\"Java流程控制——选择控制结构\"><a href=\"#Java流程控制——选择控制结构\" class=\"headerlink\" title=\"Java流程控制——选择控制结构\"></a>Java流程控制——选择控制结构</h2><p><strong>定义</strong>：条件语句根据不同条件执行不同语句，包括if语句和switch多分支语句</p>\n<p><strong>if分支结构</strong>&#x2F;<strong>if-else分支结构</strong>&#x2F;<strong>if-else if-else分支结构</strong></p>\n<p><strong>switch分支结构</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">switch</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #676E95; font-style: italic\">/*表达式*/</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//执行的代码</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//执行的代码</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">default</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div>","text":"ε &#x3D;(´ο｀*)))唉，上次用 Java 还是在上次，感觉语法什么的已经忘得干干净净了，先来总结一些我易混的知识点啥的恢复一下记忆 Java标识符定...","permalink":"/post/javaGrammar","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java\"><span class=\"toc-text\">Java</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">标识符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">Java 注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">Java 访问修饰符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E5%88%86%E9%9A%94%E7%AC%A6%E3%80%81%E8%BD%AC%E4%B9%89%E7%AC%A6\"><span class=\"toc-text\">Java 分隔符、转义符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%9A%94%E7%AC%A6\"><span class=\"toc-text\">分隔符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E4%B9%89%E7%AC%A6\"><span class=\"toc-text\">转义符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Java 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">引用数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">简单数据转换</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">Java 变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E8%A2%AB%E5%A3%B0%E6%98%8E%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%88%92%E5%88%86\"><span class=\"toc-text\">按被声明的位置划分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E6%89%80%E5%B1%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86\"><span class=\"toc-text\">按所属的数据类型划分</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">Java 常量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Java 流程控制——顺序控制结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E2%80%94%E2%80%94%E9%80%89%E6%8B%A9%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Java流程控制——选择控制结构</span></a></li></ol></li></ol>","author":{"name":"Ed-RYan","slug":"blog-author","avatar":"https://picdl.sunbangyan.cn/2024/01/27/b3236412f4a1762b08031ab7af587235.webp","link":"/","description":"想暂停时间 <br /> @ <b>淼</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"iconfont icon-tengxunQQ","link":"https://picdl.sunbangyan.cn/2024/01/21/8f2f70af10b4f0d5d6f32559116ba096.jpeg"},"Bilibili":{"icon":"iconfont icon-bilibili","link":"https://space.bilibili.com/142342578?spm_id_from=333.1007.0.0"},"Wechat":{"icon":"iconfont icon-weixin","link":"https://picdl.sunbangyan.cn/2024/01/21/42a74c77817f8c7588ebeedffd7e94e3.jpeg"},"WechatPay":{"icon":"iconfont icon-weixinzhifu","link":"https://picss.sunbangyan.cn/2024/01/21/42669be5c178707607662c75477734a8.jpeg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"蓝桥杯知识点汇总","uid":"fa8c242a44c2320cdf0d2adc7864bdb1","slug":"LqKnowledgePoint","date":"2024-01-23T02:13:50.000Z","updated":"2024-01-23T03:09:41.311Z","comments":true,"path":"api/articles/LqKnowledgePoint.json","keywords":null,"cover":null,"text":"蓝桥杯知识点汇总基础算法 枚举 模拟 贪心 递归 分治 构造 前缀和差分 搜索和排序 子集生成 线性搜索 二分法 三分法 BFS 双向广搜 广搜优化 A 算法 ...","permalink":"/post/LqKnowledgePoint","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"}],"author":{"name":"Ed-RYan","slug":"blog-author","avatar":"https://picdl.sunbangyan.cn/2024/01/27/b3236412f4a1762b08031ab7af587235.webp","link":"/","description":"想暂停时间 <br /> @ <b>淼</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"iconfont icon-tengxunQQ","link":"https://picdl.sunbangyan.cn/2024/01/21/8f2f70af10b4f0d5d6f32559116ba096.jpeg"},"Bilibili":{"icon":"iconfont icon-bilibili","link":"https://space.bilibili.com/142342578?spm_id_from=333.1007.0.0"},"Wechat":{"icon":"iconfont icon-weixin","link":"https://picdl.sunbangyan.cn/2024/01/21/42a74c77817f8c7588ebeedffd7e94e3.jpeg"},"WechatPay":{"icon":"iconfont icon-weixinzhifu","link":"https://picss.sunbangyan.cn/2024/01/21/42669be5c178707607662c75477734a8.jpeg"}}}}},"next_post":{"title":"Java学习笔记","uid":"1451337e2cd8330994910442b8a41dbc","slug":"Java","date":"2024-01-21T08:53:49.000Z","updated":"2024-01-21T13:21:18.558Z","comments":true,"path":"api/articles/Java.json","keywords":null,"cover":"https://picst.sunbangyan.cn/2024/01/21/21cae43201d6a7fdaa64b1fefebdbb37.jpeg","text":"JAVA程序使用记事本编写代码 public 访问修饰符用于控制程序的其他部分对这段代码的访问级别 class是类，java是面向对象的语言，所有对象必须位于类...","permalink":"/post/Java","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"author":{"name":"Ed-RYan","slug":"blog-author","avatar":"https://picdl.sunbangyan.cn/2024/01/27/b3236412f4a1762b08031ab7af587235.webp","link":"/","description":"想暂停时间 <br /> @ <b>淼</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"iconfont icon-tengxunQQ","link":"https://picdl.sunbangyan.cn/2024/01/21/8f2f70af10b4f0d5d6f32559116ba096.jpeg"},"Bilibili":{"icon":"iconfont icon-bilibili","link":"https://space.bilibili.com/142342578?spm_id_from=333.1007.0.0"},"Wechat":{"icon":"iconfont icon-weixin","link":"https://picdl.sunbangyan.cn/2024/01/21/42a74c77817f8c7588ebeedffd7e94e3.jpeg"},"WechatPay":{"icon":"iconfont icon-weixinzhifu","link":"https://picss.sunbangyan.cn/2024/01/21/42669be5c178707607662c75477734a8.jpeg"}}}}}}